Create typed Schema containing models.
function Schema<T>(name: string, options: ConnectionOptions): SchemaType<T> {
  const connection = createPool(options)
  connection.query(`CREATE DATABASE IF NOT EXISTS ${name}; USE ${name}`).catch((error: any) => {
    console.error({ error: error.toString() })
    connection.end()
  })

  return {
    connection,
    name,
    models: {},

    addModel<T>(): ModelType<T>
    close() {

    },
  }
}

Create models and add to schema.
  class User {
    constructor(name, age) {
      this.name = name;
      this.age = age;
    }
  }
  class Post {
    constructor(title, content) {
      this.title = title;
      this.content = content;
    }
  }
  const userSchema = new Schema();
  const postSchema = new Schema();
  userSchema.add(User);
  postSchema.add(Post);
  const userModel = userSchema.createModel();
  const postModel = postSchema.createModel();
  const user = new userModel('John', 30);
  const post = new postModel('My first post', 'This is my first post.');
  console.log(user);
  console.log(post);

Use declare class instead of interface for ModelType and AliasModelType